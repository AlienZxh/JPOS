apply plugin: 'com.android.application'
apply plugin: 'com.getkeepsafe.dexcount'
apply plugin: 'com.neenbedankt.android-apt'
apply plugin: 'com.frogermcs.androiddevmetrics'
apply plugin: 'realm-android'


dexcount {
    format = "list"
    includeClasses = false
    includeFieldCount = true
    includeTotalMethodCount = true
    orderByMethodCount = false
    verbose = false
    maxTreeDepth = Integer.MAX_VALUE
    teamCityIntegration = false
}

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    defaultConfig {
        multiDexEnabled true

        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        applicationId rootProject.ext.androidApplicationId
        versionCode rootProject.ext.androidVersionCode
        versionName rootProject.ext.androidVersionName

        ndk {
            //设置支持的SO库架构
            abiFilters 'armeabi', 'x86', 'armeabi-v7a', 'x86_64', 'arm64-v8a'
        }

        // 以Proguard的方式手动加入要放到Main.dex中的类
        multiDexKeepProguard file("keep_in_main_dex.txt")
    }

    dexOptions {
        jumboMode = true
    }

    sourceSets {
        main.jniLibs.srcDirs = ['libs']
    }

    dataBinding {
        enabled true
    }

    signingConfigs {
        release {
            storeFile file("../sign/j1j2_zxh.keystore")
            storePassword "zxh19910528"
            keyAlias "j1j2_zxh_keystore"
            keyPassword "zxh19910528"
        }

        debug {
            storeFile file("../sign/j1j2_zxh.keystore")
            storePassword "zxh19910528"
            keyAlias "j1j2_zxh_keystore"
            keyPassword "zxh19910528"
        }
    }

    buildTypes {
        debug {
            signingConfig signingConfigs.debug
            minifyEnabled false
            zipAlignEnabled false
            shrinkResources false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'

            buildConfigField "String", "API_URL", "\"http://218.244.128.140:8080/\""
        }

        release {
            signingConfig signingConfigs.release
            minifyEnabled false
            zipAlignEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'

            buildConfigField "String", "API_URL", "\"http://218.244.128.140:8080/\""
        }
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    //support
    compile "com.android.support:appcompat-v7:$rootProject.supportLibraryVersion"
    compile "com.android.support:support-v4:$rootProject.supportLibraryVersion"
    compile "com.android.support:recyclerview-v7:$rootProject.supportLibraryVersion"
    compile "com.android.support:cardview-v7:$rootProject.supportLibraryVersion"
    compile "com.android.support:design:$rootProject.supportLibraryVersion"
    compile "com.android.support:support-annotations:$rootProject.supportLibraryVersion"
    compile "com.android.support:multidex:$rootProject.multidexVersion"
    //data
    compile "com.hardsoftstudio:rxflux:$rootProject.rxfluxVersion"
    compile "io.reactivex:rxjava:$rootProject.rxjavaVersion"
    compile "io.reactivex:rxandroid:$rootProject.rxandroidVersion"
    compile "com.squareup.okhttp3:logging-interceptor:$rootProject.okhttpVersion"
    compile "com.squareup.okhttp3:okhttp:$rootProject.okhttpVersion"
    compile "com.squareup.retrofit2:retrofit:$rootProject.retrofitVersion"
    compile "com.squareup.retrofit2:adapter-rxjava:$rootProject.retrofitVersion"
    compile "com.squareup.retrofit2:converter-gson:$rootProject.retrofitVersion"
    compile "com.google.code.gson:gson:$rootProject.gsonVersion"
//    compile "org.lzh.nonview.updateplugin:UpdatePlugin:$rootProject.updatePluginVersion"
    compile "org.greenrobot:eventbus:$rootProject.eventbusVersion"
    //data
    apt "com.github.yatatsu:autobundle-processor:$rootProject.autobundleVersion"
    compile "com.github.yatatsu:autobundle:$rootProject.autobundleVersion"
    //time
    compile "com.jakewharton.threetenabp:threetenabp:$rootProject.threetenabpVersion"
    //dagger
    compile "com.google.dagger:dagger:$rootProject.daggerVersion"
    apt "com.google.dagger:dagger-compiler:$rootProject.daggerVersion"
    provided "org.glassfish:javax.annotation:$rootProject.javaxAnnotationVersion"
    apt "com.google.guava:guava:$rootProject.guavaVersion"
    //font
    compile "uk.co.chrisjenx:calligraphy:$rootProject.calligraphyVersion"
    //debug
    compile "com.github.orhanobut:logger:$rootProject.loggerVersion"
    //debug
    debugCompile "com.squareup.leakcanary:leakcanary-android:$rootProject.leakCanaryVersion"
    releaseCompile "com.squareup.leakcanary:leakcanary-android-no-op:$rootProject.leakCanaryVersion"
    testCompile "com.squareup.leakcanary:leakcanary-android-no-op:$rootProject.leakCanaryVersion"
    //debug
    compile "com.facebook.stetho:stetho:$rootProject.stethoVersion"
    compile "com.facebook.stetho:stetho-okhttp3:$rootProject.stethoVersion"
    compile "com.uphyca:stetho_realm:$rootProject.stethorealmVersion"
    //imageloader
    compile "com.facebook.fresco:fresco:$rootProject.frescoVersion"
    //qrcode
    compile "com.google.zxing:core:$rootProject.zxingVersion"
    //ui
    compile "com.zhy:autolayout:$rootProject.autolayoutVersion" //autolayout
    compile "com.github.dmytrodanylyk.android-process-button:library:$rootProject.androidProcessButtonVersion"
    compile "com.andreabaccega:android-form-edittext:$rootProject.formEdittextVersion"
    compile "com.jude:easyrecyclerview:$rootProject.easyrecyclerviewVersion"
    compile "com.github.castorflex.smoothprogressbar:library-circular:$rootProject.smoothprogressbarVersion"
    compile "cn.finalteam:galleryfinal:$rootProject.galleryfinalVersion"
    compile "me.yokeyword:fragmentation:$rootProject.fragmentationVersion"
    compile "com.jzxiang.pickerview:TimePickerDialog:$rootProject.timePickerDialogVersion"
    compile "net.cachapa.expandablelayout:expandablelayout:$rootProject.expandablelayoutVersion"
    compile "com.timehop.stickyheadersrecyclerview:library:$rootProject.stickyheadersrecyclerviewVersion"
    compile "com.github.PhilJay:MPAndroidChart:$rootProject.MPAndroidChartVersion"
    compile "com.zhy:base-rvadapter:$rootProject.baservadapterVersion"
    //bugly
    compile 'com.tencent.bugly:crashreport_upgrade:latest.release'
    //其中latest.release指代最新版本号，也可以指定明确的版本号，例如1.0.0
    compile 'com.tencent.bugly:nativecrashreport:latest.release'
    //其中latest.release指代最新版本号，也可以指定明确的版本号，例如2.2.0
    //test
    testCompile "junit:junit:$rootProject.ext.junitVersion"
}

def gitSha() {
    try {
        String gitRev = 'git rev-parse --short HEAD'.execute(null, project.rootDir).text.trim()
        if (gitRev == null) {
            throw new GradleException("can't get git rev, you should add git to system path or just input test value, such as 'testTinkerId'")
        }
        return gitRev
    } catch (Exception e) {
        throw new GradleException("can't get git rev, you should add git to system path or just input test value, such as 'testTinkerId'")
    }
}


def bakPath = file("${buildDir}/bakApk/")

/**
 * you can use assembleRelease to build you base apk
 * use tinkerPatchRelease -POLD_APK=  -PAPPLY_MAPPING=  -PAPPLY_RESOURCE= to build patch
 * add apk from the build/bakApk
 */
ext {
    // for some reason, you may want to ignore tinkerBuild, such as instant run debug build?
    tinkerEnabled = true

    // for normal build
    // old apk file to build patch apk
    tinkerOldApkPath = "${bakPath}/app-debug-1208-14-42-50.apk"
    // proguard mapping file to build patch apk
    tinkerApplyMappingPath = "${bakPath}/app-debug-1208-14-42-50-mapping.txt"
    // resource R.txt to build patch apk, must input if there is resource changed
    tinkerApplyResourcePath = "${bakPath}/app-debug-1208-14-42-50-R.txt"

    // only use for build all flavor, if not, just ignore this field
    tinkerBuildFlavorDirectory = "${bakPath}/app-debug-1208-14-42-50"
}

def getOldApkPath() {
    return hasProperty("OLD_APK") ? OLD_APK : ext.tinkerOldApkPath
}

def getApplyMappingPath() {
    return hasProperty("APPLY_MAPPING") ? APPLY_MAPPING : ext.tinkerApplyMappingPath
}

def getApplyResourceMappingPath() {
    return hasProperty("APPLY_RESOURCE") ? APPLY_RESOURCE : ext.tinkerApplyResourcePath
}

def getTinkerIdValue() {
    return hasProperty("TINKER_ID") ? TINKER_ID : gitSha()
}

def buildWithTinker() {
    return hasProperty("TINKER_ENABLE") ? TINKER_ENABLE : ext.tinkerEnabled
}

def getTinkerBuildFlavorDirectory() {
    return ext.tinkerBuildFlavorDirectory
}

/**
 * 更多Tinker插件详细的配置，参考：https://github.com/Tencent/tinker/wiki
 */
if (buildWithTinker()) {

    // 如果只用我们提供的插件，可以进行以下配置
    apply plugin: 'com.tencent.bugly.tinker-support'
    tinkerSupport {
        // 开启tinker-support插件，默认值true
        enable = true
        // 是否编译完成后，归档apk到指定目录，默认值false
        autoBackupApk = false
        // 指定归档目录，默认值当前module的子目录tinker
        // backupApkDir = 'tinker'
        // 是否启用覆盖tinkerPatch配置功能，默认值false
        // 开启后tinkerPatch配置不生效，即无需添加tinkerPatch
        overrideTinkerPatchConfiguration = true
        // 编译补丁包时，必需指定基线版本的apk，默认值为空
        // 如果为空，则表示不是进行补丁包的编译
        // @{link tinkerPatch.oldApk }
        baseApk = getOldApkPath()
        // 对应tinker插件applyMapping
        baseApkProguardMapping = getApplyMappingPath()
        // 对应tinker插件applyResourceMapping
        baseApkResourceMapping = getApplyResourceMappingPath()
        tinkerId = rootProject.ext.androidVersionName
        dexLoader = ["com.tencent.tinker.loader.*",
                     "com.j1j2.jposmvvm.JPOSApplication",
                     "com.j1j2.jposmvvm.JPOSDebugApplication"]
    }

}


List<String> flavors = new ArrayList<>();
project.android.productFlavors.each { flavor ->
    flavors.add(flavor.name)
}
boolean hasFlavors = flavors.size() > 0
/**
 * bak apk and mapping
 */
android.applicationVariants.all { variant ->
    /**
     * task type, you want to bak
     */
    def taskName = variant.name
    def date = new Date().format("MMdd-HH-mm-ss")

    tasks.all {
        if ("assemble${taskName.capitalize()}".equalsIgnoreCase(it.name)) {

            it.doLast {
                copy {
                    def fileNamePrefix = "${project.name}-${variant.baseName}"
                    def newFileNamePrefix = hasFlavors ? "${fileNamePrefix}" : "${fileNamePrefix}-${date}"

                    def destPath = hasFlavors ? file("${bakPath}/${project.name}-${date}/${variant.flavorName}") : bakPath
                    from variant.outputs.outputFile
                    into destPath
                    rename { String fileName ->
                        fileName.replace("${fileNamePrefix}.apk", "${newFileNamePrefix}.apk")
                    }

                    from "${buildDir}/outputs/mapping/${variant.dirName}/mapping.txt"
                    into destPath
                    rename { String fileName ->
                        fileName.replace("mapping.txt", "${newFileNamePrefix}-mapping.txt")
                    }

                    from "${buildDir}/intermediates/symbols/${variant.dirName}/R.txt"
                    into destPath
                    rename { String fileName ->
                        fileName.replace("R.txt", "${newFileNamePrefix}-R.txt")
                    }
                }
            }
        }
    }
}
project.afterEvaluate {
    //sample use for build all flavor for one time
    if (hasFlavors) {
        task(tinkerPatchAllFlavorRelease) {
            group = 'tinker'
            def originOldPath = getTinkerBuildFlavorDirectory()
            for (String flavor : flavors) {
                def tinkerTask = tasks.getByName("tinkerPatch${flavor.capitalize()}Release")
                dependsOn tinkerTask
                def preAssembleTask = tasks.getByName("process${flavor.capitalize()}ReleaseManifest")
                preAssembleTask.doFirst {
                    String flavorName = preAssembleTask.name.substring(7, 8).toLowerCase() + preAssembleTask.name.substring(8, preAssembleTask.name.length() - 15)
                    project.tinkerPatch.oldApk = "${originOldPath}/${flavorName}/${project.name}-${flavorName}-release.apk"
                    project.tinkerPatch.buildConfig.applyMapping = "${originOldPath}/${flavorName}/${project.name}-${flavorName}-release-mapping.txt"
                    project.tinkerPatch.buildConfig.applyResourceMapping = "${originOldPath}/${flavorName}/${project.name}-${flavorName}-release-R.txt"

                }

            }
        }

        task(tinkerPatchAllFlavorDebug) {
            group = 'tinker'
            def originOldPath = getTinkerBuildFlavorDirectory()
            for (String flavor : flavors) {
                def tinkerTask = tasks.getByName("tinkerPatch${flavor.capitalize()}Debug")
                dependsOn tinkerTask
                def preAssembleTask = tasks.getByName("process${flavor.capitalize()}DebugManifest")
                preAssembleTask.doFirst {
                    String flavorName = preAssembleTask.name.substring(7, 8).toLowerCase() + preAssembleTask.name.substring(8, preAssembleTask.name.length() - 13)
                    project.tinkerPatch.oldApk = "${originOldPath}/${flavorName}/${project.name}-${flavorName}-debug.apk"
                    project.tinkerPatch.buildConfig.applyMapping = "${originOldPath}/${flavorName}/${project.name}-${flavorName}-debug-mapping.txt"
                    project.tinkerPatch.buildConfig.applyResourceMapping = "${originOldPath}/${flavorName}/${project.name}-${flavorName}-debug-R.txt"
                }

            }
        }
    }
}
